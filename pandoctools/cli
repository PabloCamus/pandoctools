#!/bin/sh
# stdin: input file source
# arguments:
#   $1: profile script name without extension
#   $2: input file path
#   $3: output file extension (optional, defult=md)
#   $4: '--data-dir' flag (optional): whether to add pandoc
#       user data dir '$HOME/.pandoc/pandoctools' to PATH
# TODO: looks like bad idea from security point of view...
# stdout: converted source
# example: source pandoctools profile input.md md

# TODO: You can set environment variable PANDOCTOOLS that
# TODO: contains full path to this pandoctools shell script
# TODO: (it's useful when you installed pandoctools to
# TODO: conda/virtual environment and it's not in the PATH).


# export PYTHONIOENCODING="utf-8"
LANG='C.UTF-8'


# TODO: '--data-dir' flag
# get pandoctools bash dirs in python module and in pandoc data dir
#   (latter is for superceding with user settings scripts):
pandoctools_config="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
pandoc_data_dir="$(pandoc --version | grep -o -P '(?<=Default user data directory: ).*')"
pandoc_data_dir="$(source ${pandoctools_config}/unixpath "${pandoc_data_dir}")"
PATH="${pandoc_data_dir}/pandoctools:${pandoctools_config}:$PATH"


# parse input file path, output and input extensions:
input_file="${2%.*}"
out_ext="${2##*.}"
in_ext="${input_file##*.}"
if [ "${input_file}" == "${out_ext}" ]; then
    out_ext=""
fi
if [ "${input_file}" == "${in_ext}" ]; then
    in_ext=""
fi


# check for superceding profile script
# (should be in the same dir, same filename but without extension):
script="${input_file%.*}"
#   `! -f $x` means `not file_exist(x)` 
if [ ! -f "${script}" ]; then
    script="$1"
fi


# set conda environment name:
conda_env="$3"


# TODO: теперь нет в параметрах этого
# specify python path and add it to PATH (if provided):
if [ "$4" != "" ]; then
    PYTHONPATH="$(source unixpath "$4")"
    PATH="${PYTHONPATH}:${PYTHONPATH}/Scripts:${PYTHONPATH}/Library/bin:$PATH"
else
    if [ "${PYTHONPATH}" != "" ]; then
        PYTHONPATH="$(source unixpath "${PYTHONPATH}")"
    fi
fi


# set $machine:
case "$(uname -s)" in
    CYGWIN*)    machine=windows;;
    MINGW*)     machine=windows;;
    *)          machine=other
esac


# TODO: специальный запуск, который запускает по имени профиля всего из двух папок.
# run profile script:
source "${script}"
